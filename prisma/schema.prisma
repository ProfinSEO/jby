// // // This is your Prisma schema file,
// // // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// // generator client {
// //   provider = "prisma-client-js"
// //   // output   = "../lib/generated/prisma"
// // }

// // datasource db {
// //   provider = "postgresql"
// //   url      = env("DATABASE_URL")
// // }



// // model User {
// //   id            String    @id @default(cuid())
// //   name          String?
// //   email         String?   @unique
// //   emailVerified DateTime? @map("email_verified")
// //   image         String?
// //   accounts      Account[]
// //   sessions      Session[]

// //   stripeCustomerId String? @unique

// //   userType UserType?
  
// //   onboardingCompleted Boolean @default(false)

// //   Recruiter Recruiter?
// //   Jobseeker Jobseeker?

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt
// // }

// // enum UserType {
// //   COMPANY
// //   JOB_SEEKER
// // }

// // model Recruiter {
// //   id String @id @default(uuid())
// //   name String
// //   location String
// //   about String
// //   logo String
// //   website String
// //   xAccount String?

// //   JobPost JobPost[]

// //   user      User     @relation(fields: [userId], references: [id])
// //   userId    String   @unique
// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt

// // }

// // model Jobseeker {
// //   id String @id @default(uuid())

// //   name String
// //   about String 
// //   resume String
// //   user      User     @relation(fields: [userId], references: [id])
// //   userId    String   @unique

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt
// // }

// // model Account {
// //   id                 String  @id @default(cuid())
// //   userId             String  @map("user_id")
// //   type               String
// //   provider           String
// //   providerAccountId  String  @map("provider_account_id")
// //   refresh_token      String? @db.Text
// //   access_token       String? @db.Text
// //   expires_at         Int?
// //   token_type         String?
// //   scope              String?
// //   id_token           String? @db.Text
// //   session_state      String?
 
// //   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
// //   @@unique([provider, providerAccountId])
// //   @@map("accounts")
// // }


// // model Session {
// //   id           String   @id @default(cuid())
// //   sessionToken String   @unique @map("session_token")
// //   userId       String   @map("user_id")
// //   expires      DateTime
// //   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
// //   @@map("sessions")
// // }


// // model VerificationToken {
// //   identifier String
// //   token      String
// //   expires    DateTime
 
// //   @@unique([identifier, token])
// //   @@map("verification_tokens")
// // }

// // model JobPost {
// //   id String @id @default(uuid())

// //   jobTitle String 
// //   employmentType String
// //   location String
// //   salaryForm Int
// //   salaryTo Int
// //   jobDescription String
// //   listingDuration Int
// //   benefits String[]

// //   status JobPostStatus @default(DRAFT)

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt 
// //   Company Recruiter @relation(fields: [recruiterId], references: [id])
// //   recruiterId String

// // }

// // enum JobPostStatus {
// //   DRAFT
// //   ACTIVE
// //   EXPIRED
// // }

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   accounts      Account[]
//   sessions      Session[]

//   stripeCustomerId String? @unique

//   userType UserType?
  
//   onboardingCompleted Boolean @default(false)

//   // Fixed: Use consistent naming
//   recruiter Recruiter?
//   jobseeker Jobseeker?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum UserType {
//   RECRUITER  // Changed from COMPANY for consistency
//   JOB_SEEKER
// }

// model Recruiter {
//   id String @id @default(uuid())
//   name String
//   location String
//   about String
//   logo String
//   website String
//   xAccount String?

//   // Fixed: Use consistent naming
//   jobPosts JobPost[]

//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Jobseeker {
//   id String @id @default(uuid())

//   name String
//   about String 
//   resume String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String   @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String? @db.Text
//   access_token       String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? @db.Text
//   session_state      String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@map("sessions")
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime
 
//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }

// model JobPost {
//   id String @id @default(uuid())

//   jobTitle String 
//   employmentType String
//   location String
//   salaryFrom Int  // Fixed typo: salaryForm -> salaryFrom
//   salaryTo Int
//   jobDescription String
//   listingDuration Int
//   benefits String[]

//   status JobPostStatus @default(DRAFT)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt 
  
//   // Fixed: Use consistent naming
//   recruiter Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
//   recruiterId String
// }

// enum JobPostStatus {
//   DRAFT
//   ACTIVE
//   EXPIRED
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  stripeCustomerId String? @unique

  userType UserType?
  
  onboardingCompleted Boolean @default(false)

  // Keep PascalCase to match your generated client
  Recruiter Recruiter?
  Jobseeker Jobseeker?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  COMPANY      // Keep as COMPANY since it's in your generated client
  JOB_SEEKER
}

model Recruiter {
  id String @id @default(uuid())
  name String
  location String
  about String
  logo String
  website String
  xAccount String?

  // Match your generated client - JobPost array (not jobPosts)
  JobPost JobPost[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Jobseeker {
  id String @id @default(uuid())

  name String
  about String 
  resume String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model JobPost {
  id String @id @default(uuid())

  jobTitle String 
  employmentType String
  location String
  salaryForm Int    // Keep as salaryForm to match your generated client
  salaryTo Int
  jobDescription String
  listingDuration Int
  benefits String[]

  status JobPostStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  
  // Match your generated client - relation named "Company"
  Company Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  recruiterId String
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}